// Marcello Manfrin 01/04/2022

// Il programma esegue il teorema di Ossanna.

// Il codice è generosamente ispirato ad uno girato tra gruppi telegram da anonimo autore.

// ATTENZIONE: prima di eseguire questo codice deve esser fatto girare
// almeno una volta il programma "ReteTotale" in quanto viene qui richiamata
// la matrice di trasmissione della rete che viene conservata
// nello slot di memoria M0.


EXPORT Ossanna()
BEGIN

LOCAL Pa,Qa,Up0;          //input

LOCAL A,B,D,Sa;
LOCAL Iamp,φ,Un;
LOCAL S0r,U0ANL,Z;
LOCAL Ub,Zb,Sb;
LOCAL Sa_pu,Zpu,X;
LOCAL ψ,Φ;
LOCAL ηoss,ξ;
LOCAL Ux,Uy;
LOCAL a,b,c,d,f;
LOCAL Ua_pu,Ua,DU;
LOCAL Sp_pu,Sp_mono,DS;
LOCAL α,Up0;
LOCAL Ia,Ip;
LOCAL ∆S,∆U,∆P,∆Q,∆p,∆q;
LOCAL OSS;

INPUT({Pa,Qa,Up0},"Input Ossanna",{"Pa [MW]","Qa [Mvar]","Up0 [kV]"},
{"Potenza attiva trifase allo arrivo","Potenza reattiva trifase allo arrivo","Tensione stellata alla partenza"});
A:=M0(1,1);
B:=M0(1,2);
D:=M0(2,2);
Sa:=Pa+i*Qa;

PRINT("");
PRINT("===============OSSANNA===============");
PRINT("");

S0r:=Sa/3;
PRINT("S_0r = Sa/3 = " +S0r +" [MW+jMVAR]");
U0ANL:=Up0/A;
PRINT("U_0ANL = Up0/A = "+U0ANL +" [kV]");
Z:=B/A; 
PRINT("Z = B/A = " +Z +" [Ω]");
PRINT("");

Ub:=ABS(U0ANL);
Zb:=ABS(Z);
Sb:=Ub^2/Zb;
PRINT("Grandezze Base");
PRINT("Ub = |U0ANL| = "+Ub +" [kV]");
PRINT("Zb = |Z| = "+Zb +" [Ω]");
PRINT("Sb =Ub^2/Zb = "+Sb +" [MVA]");
PRINT("");

Sa_pu:=S0r/Sb;
Zpu:=Z/Zb;
PRINT("Grandezze in pu [/]");
PRINT("Sa_pu = S0r/Sb = "+Sa_pu);
PRINT("Zpu = Z/Zb = "+Zpu);

ψ:=ARG(Zpu);
Φ:=ARG(Sa_pu);
X:=ψ-Φ;
PRINT("X = ψ-Φ = arg(Zpu)-arg(Sa_pu) = "+X +" [rad]");

ηoss:=(ABS(Sa_pu))*sin(X);
PRINT("ηoss = |Sa_pu|*senX = "+ηoss);
PRINT("");

Uy:=ηoss;
a:=ABS(Sa_pu);
b:=cos(ψ-Φ);
c:=sin(ψ-Φ);
d:=0.25-a*b-(a*c)^2;


if d>0 then
	ξ:=sqrt(d);
	PRINT("ξ reale, linea realizzabile fisicamente");
else
	ξ:=sqrt(ABS(d))*i;
	PRINT("ξ immaginario, linea non realizzabile fisicamente");
end;
 
PRINT("ξ = √1/4-|Sa_pu|*cos(ψ-Φ)-[|Sa_pu|*sen(ψ-Φ)]^2 = "+ξ);
PRINT("");


Ux:=0.5+ξ;
Ua_pu:=Ux-i*Uy;
Ua:=Ua_pu*Ub;
∆U:=((Up0-ABS(Ua))/ABS(Ua))*100;
PRINT("Tensioni [kV]");
PRINT("Ux = 1/2+ξ = "+Ux);
PRINT("Ua_pu = ux-juy = " +Ua_pu);
PRINT("Ua = Ua_pu*Ub = "+Ua);
PRINT("∆u = " +∆U +" %");
PRINT("");

α:=arg(A);
Sp_pu:=(A*CONJ(D)-CONJ(Ua_pu)*e^(i*2*α))*e^(i*ψ);
Sp_mono:=Sp_pu*Sb;
∆S:=3*Sp_mono-Sa;
∆P:=RE(∆S);
∆Q:=IM(∆S);
PRINT("Potenze [MW+jMvar]");
PRINT("Sp_pu = [A*D°-Ua_pu°*e^(j2α)]*e^jψ = " +Sp_pu);
PRINT("Sp_mono = Sa_pu*Sb = "+Sp_mono);
PRINT("∆S = 3*Sp_mono-Sa = "+∆S);

if Pa=0 
	then PRINT("Pa=0, ∆p non calcolato ");
	else ∆p:=(∆P/Pa)*100; PRINT("∆p = " +∆p +" %");
end;
if Qa=0 
	then PRINT("Qa=0, ∆q non calcolato ");
	else ∆q:=ABS(∆Q/Qa)*100; PRINT("∆q = " +∆q +" %");
end;
PRINT("");

Ia:=CONJ(Sa/(3*Ua));
Ip:=CONJ(Sp_mono/Up0);
PRINT("Correnti [kA]");
PRINT("Ip = (Sp_mono/Up)° = "+Ip);
PRINT("|Ip| = "+ABS(Ip));
PRINT("Ia = (Sa/3Ua)° = "+Ia);
PRINT("|Ia| = "+ABS(Ia));
PRINT("");

PRINT("OK");

END;